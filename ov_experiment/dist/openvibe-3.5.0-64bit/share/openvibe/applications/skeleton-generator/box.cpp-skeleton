///-------------------------------------------------------------------------------------------------
/// 
/// \file CBoxAlgorithm@@ClassName@@.cpp
/// \brief Classes of the Box @@BoxName@@.
/// \author @@Author@@ (@@Company@@).
/// \version @@Version@@.
/// \date @@Date@@.
/// 
///-------------------------------------------------------------------------------------------------

#include "CBoxAlgorithm@@ClassName@@.hpp"

namespace OpenViBE {
namespace Plugins {
namespace @@Namespace@@ {
///-------------------------------------------------------------------------------------------------
bool CBoxAlgorithm@@ClassName@@::initialize()
{
@@AlgorithmInitialisation@@	
	// If you need to retrieve setting values, use the FSettingValueAutoCast function.
	// For example :
	// - CString setting at index 0 in the setting list :
	// CString sSettingValue = FSettingValueAutoCast(*this->getBoxAlgorithmContext(), 0);
	// - unsigned int64 setting at index 1 in the setting list :
	// uint64_t uiSettingValue = FSettingValueAutoCast(*this->getBoxAlgorithmContext(), 1);
	// - double setting at index 2 in the setting list :
	// double doubleSettingValue = FSettingValueAutoCast(*this->getBoxAlgorithmContext(), 2);
	// ...

	return true;
}

///-------------------------------------------------------------------------------------------------
bool CBoxAlgorithm@@ClassName@@::uninitialize()
{
@@AlgorithmUninitialisation@@
	return true;
}

@@ProcessClockCommentIn@@
///-------------------------------------------------------------------------------------------------
bool CBoxAlgorithm@@ClassName@@::processClock(Kernel::CMessageClock& msg)
{
	// some pre-processing code if needed...
	// ready to process !
	getBoxAlgorithmContext()->markAlgorithmAsReadyToProcess();
	return true;
}

@@ProcessClockCommentIn@@
///-------------------------------------------------------------------------------------------------
uint64_t CBoxAlgorithm@@ClassName@@::getClockFrequency()
{
	// Note that the time is coded on a 64 bits unsigned integer, fixed decimal point (32:32)
	return @@ClockFrequency@@; // the box clock frequency
}

@@ProcessInputCommentIn@@
///-------------------------------------------------------------------------------------------------
bool CBoxAlgorithm@@ClassName@@::processInput(const size_t /*index*/)
{
	// some pre-processing code if needed...
	// ready to process !
	getBoxAlgorithmContext()->markAlgorithmAsReadyToProcess();

	return true;
}

///-------------------------------------------------------------------------------------------------
bool CBoxAlgorithm@@ClassName@@::process()
{
	
	// the static box context describes the box inputs, outputs, settings structures
	const Kernel::IBox& staticBoxCtx = this->getStaticBoxContext();
	// the dynamic box context describes the current state of the box inputs and outputs (i.e. the chunks)
	Kernel::IBoxIO& boxCtx = this->getDynamicBoxContext();

	// here is some useful functions:
	// - To get input/output/setting count:
	// staticBoxCtx.getInputCount();
	// staticBoxCtx.getOutputCount();
	// staticBoxCtx.getSettingCount();
	
	// - To get the chunks currently available on a particular input :
	// boxCtx.getInputChunkCount(input_index)
	// boxCtx.getInputChunk(input_index, chunk_index)
	
	// - To get the chunk available on a particular output :
	// boxCtx.getOutputChunk(output_index)
	// - To send an output chunk :
	// boxCtx.markOutputAsReadyToSend(output_index, chunk_start_time, chunk_end_time);
	
	
	// A typical process iteration may look like this.
	// This example only iterate over the first input.
	/*
	IBoxIO& boxCtx = this->getDynamicBoxContext();

	//iterate over all chunk on input 0
	for (size_t i = 0; i < boxCtx.getInputChunkCount(0); ++i)
	{
		// fill the decoder input with input chunk
		ip_bufferToDecode = boxCtx.getInputChunk(0, i);
		// link the encoder output to box output chunk
		op_buffer = boxCtx.getOutputChunk(0);

		// decode the input chunk
		m_decoder->process();
		// the decoder may have decoded 3 different parts : the header, a buffer or the end of stream.
		// 3 corresponding output triggers may rise.
		// the decoded block is now in the decoded output (let's say op_pDecodedMatrix)
		
		if(m_decoder->isOutputTriggerActive(OVP_GD_Algorithm_SignalDecoder_OutputTriggerId_ReceivedHeader))
		{
			// Header received. This happens only once when pressing "play". For example with a StreamedMatrix input, you now know the dimension count size, and label of the matrix
			// ... do some process ...
			
			// Pass the header to the next boxes, by encoding it :
			m_encoder->process(OVP_GD_Algorithm_SignalEncoder_InputTriggerId_EncodeHeader);
			// send the output chunk containing the header :
			boxCtx.markOutputAsReadyToSend(0, boxCtx.getInputChunkStartTime(0, i), boxCtx.getInputChunkEndTime(0, i));
		}
		if(m_decoder->isOutputTriggerActive(OVP_GD_Algorithm_SignalDecoder_OutputTriggerId_ReceivedBuffer))
		{
			// Buffer received. For example the matrix values
			// Access to the matrix buffer can be done thanks to :
			// op_pDecodedMatrix->getBuffer(), which is a one-dimension vector of value.
			
			// ... do some process ...

			// Encode the output buffer :
			m_encoder->process(OVP_GD_Algorithm_SignalEncoder_InputTriggerId_EncodeBuffer);
			// and send it to the next boxes :
			boxCtx.markOutputAsReadyToSend(0, boxCtx.getInputChunkStartTime(0, i), boxCtx.getInputChunkEndTime(0, i));
			
		}
		if(m_decoder->isOutputTriggerActive(OVP_GD_Algorithm_SignalDecoder_OutputTriggerId_ReceivedEnd))
		{
			// End of stream received. This happens only once when pressing "stop". Just pass it to the next boxes so they receive the message :
			m_encoder->process(OVP_GD_Algorithm_SignalEncoder_InputTriggerId_EncodeEnd);
			boxCtx.markOutputAsReadyToSend(0, boxCtx.getInputChunkStartTime(0, i), boxCtx.getInputChunkEndTime(0, i));
		}

		// The current input chunk has been processed, let's discard it :
		boxCtx.markInputAsDeprecated(0, i);
	}
	*/

	// check the official developer documentation webpage for more example and information :
	// http://openvibe.inria.fr/documentation/#Developer+Documentation
	// Feel free to ask experienced developers on the forum (http://openvibe.inria.fr/forum) and IRC (#openvibe on irc.freenode.net).

	return true;
}

}  // namespace @@Namespace@@
}  // namespace Plugins
}  // namespace OpenViBE
